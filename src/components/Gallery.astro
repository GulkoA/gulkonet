---
let { unmargin, classList } = Astro.props
unmargin = unmargin || false
---

<div class={`gallery ${unmargin ? "unmargin" : ""} ${classList}`} draggable="false" title="Click and drag to scroll">
  <!-- <aside class="scroll-hint">
    <div class="scroll-hint-body">
      Click and drag to scroll or use circles below
    </div>
  </aside> -->
  <slot />
</div>
<slot name="dots"></slot>

<script>
  let isDragging = false;
  let startX: number
  let scrollLeft: number
  const slider: HTMLElement = document.querySelector('.gallery') as HTMLElement;
  // let shownHint = false;

  // Add click event listener to all anchor elements within the gallery
  const anchors = slider.querySelectorAll('a');
  anchors.forEach(anchor => {
    anchor.addEventListener('click', (e) => {
      if (isDragging) {
        e.preventDefault();
        e.stopPropagation();
        // console.log('prevent click');
      }
    });
  });

  // const scrollHint = slider.querySelector(".scroll-hint") as HTMLElement
  // function showHint() {
  //   scrollHint.classList.add("active");
  //   slider.removeEventListener('mouseenter', showHint);
  //   document.addEventListener('mousedown', removeHint);
  // }
  // function removeHint() {
  //   if (!shownHint) {
  //     scrollHint.classList.remove("active");
  //     shownHint = true;
  //   }
  // }
  // slider.addEventListener('mouseenter', showHint)

  const startDragging = (e: MouseEvent) => {
    e.preventDefault();
    startX = e.pageX - slider?.offsetLeft;
    scrollLeft = slider.scrollLeft;
    document.addEventListener('mousemove', move, false);
  }

  const stopDragging = (e: MouseEvent) => {
    if (!isDragging) { return; }
    // prevent anchor tags from navigating
    e.preventDefault();
    e.stopPropagation();
    setTimeout(() => {
      isDragging = false;
    }, 50);
    document.removeEventListener('mousemove', move, false);
  }

  const move = (e: MouseEvent) => {
    // distance threshold for dragging
    if (!isDragging && Math.abs(e.pageX - slider?.offsetLeft - startX) < 20) { return; }
    // console.log("dragging", Math.abs(e.pageX - startX));
    isDragging = true;
    const x = e.pageX - slider.offsetLeft;
    const scroll = x - startX;
    slider.scrollLeft = scrollLeft - scroll;
  }

  // Add the event listeners
  slider.addEventListener('mousedown', startDragging, false);
  document.addEventListener('mouseup', stopDragging, false);
  // slider.addEventListener('mouseleave', stopDragging, false);
</script>

<style scoped>
  .gallery {
    display: grid;
    grid-auto-flow: column; 
    gap: 1rem;

    overflow-x: scroll;
    scrollbar-width: none;
    justify-content: start;
    /* scroll-snap-type: x mandatory; */
    
    transition: transform 0.3s;
    
    padding: 0;
    /* margin: 0 1rem; */

    
  }

  /* .scroll-hint {
    display: flex;
    position: absolute;
    opacity: 0;
    transition: all 0.5s;
    z-index: 10;
    width: 99%;
    backdrop-filter: none;
    justify-content: center;
  }
  .scroll-hint.active {
    opacity: 1;
    backdrop-filter: blur(5px);
  }
  .scroll-hint-body {
    color: white;
    font-size: 1.5rem;
  } */

</style>

