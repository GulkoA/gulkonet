---
import { getCollection } from 'astro:content';

import Gallery from "./Gallery.astro";
import ProjectCard from "./ProjectCard.astro";

const pages = await getCollection('projects');
// console.log(entries);

// sort by date
pages.sort((a: any, b: any) => {
  return new Date(b.data.created).getTime() - new Date(a.data.created).getTime();
});

// remove pages prefixed with _
// pages = pages.filter((page: any) => !page.url.includes('_'));

// get all tags
const allTags: string[] = [];
pages.forEach((page: any) => {
  page.data.tags.forEach((tag: string) => {
    if (!allTags.includes(tag)) {
      allTags.push(tag);
    }
  });
});
allTags.sort();
---

<div class="tags">
  {allTags.map((tag: string) => (
  <button class="tag-button">{tag}</button>
))}
</div>

<Gallery unmargin classList="slider">
  {pages.map((page: any) => (
    <div class="card" data-tags={page.data.tags.join("\n")}>
      <ProjectCard
        title={page.data.title}
        description={page.data.description}
        image={page.data.image}
        color={page.data.color}
        secondaryColor={page.data.secondaryColor}
        tokens={page.data.tokens}
        href={"projects/" + page.slug}
        tags={page.data.tags}
        font={page.data.font}
      />
    </div>
  ))}
  <div slot="dots" class="dots">
    {pages.map((page: any) => (
      <button class="dot" title={page.data.title}></button>
    ))}
  </div>
</Gallery>

<script>

  const tagButtons: HTMLElement[] = [...document.querySelectorAll('.tag-button')] as HTMLElement[];
  const cards: HTMLElement[] = [...document.querySelectorAll('.card')] as HTMLElement[];
  const cardTags: string[][] = cards.map((card) => card.getAttribute('data-tags')?.split('\n') || []);

  let selectedTag: string;

  let streak = 0;

  tagButtons.forEach((button) => {
    button.addEventListener('click', () => {
      filterCards(button);

      streak++;
      if (streak === 1) {
        setTimeout(() => {
          streak = 0;
        }, 5000);
      } else if (streak >= 10) {
        party();
        streak = 0;
      }
    });
  });

  function filterCards(button: HTMLElement) {
    const tag = button.innerText;

    tagButtons.forEach((button) => {
      button.classList.remove('selected')
    })
    if (selectedTag === button.innerText) {
      selectedTag = "";
      button.classList.remove('selected')
    } else {
      selectedTag = tag
      button.classList.add('selected')
    }

    cards.forEach((card, index) => {
      // console.log(cardTags[index]);
      if (selectedTag === "") {
        card.style.display = 'block';
        dotsList[index].style.display = 'block';
      } else {
        if (cardTags[index].includes(selectedTag)) {
          card.style.display = 'block';
          dotsList[index].style.display = 'block';
        } else {
          card.style.display = 'none';
          dotsList[index].style.display = 'none';
        }
      }
    });

    updateDots();
  }

  const slider: HTMLElement = document.querySelector('.slider') as HTMLElement;
  const dotsContainer: HTMLElement = document.querySelector('.dots') as HTMLElement;
  const dotsList = [...dotsContainer.children] as HTMLElement[];

  dotsList.forEach((dot, i) => {
    dot.addEventListener('click', () => {
      cards[i].scrollIntoView({ behavior: 'smooth', block: 'center' });
    });
  });

  function updateDots() {
    cards.forEach((card, i) => {
      const dot = dotsList[i];
      const cardBox = card.getBoundingClientRect();
      if (cardBox.left > 0 && cardBox.right < window.innerWidth) {
        dot.classList.add('selected');
      } else {
        dot.classList.remove('selected');
      }
    });
  }

  slider.addEventListener('scroll', updateDots);
  updateDots();
  
  function party() {
    const interval = setInterval(() => {
      tagButtons.forEach((button) => {
        const color = `hsl(${Math.random() * 360}, 100%, 50%)`;
        button.style.color = color;
        button.style.borderColor = color;
      });
    }, 500);

    setTimeout(() => {
      clearInterval(interval);
      tagButtons.forEach((button) => {
        button.style.color = '';
        button.style.borderColor = '';
      });
    }, 10000);
  }
</script>

<style>
  .tag-button {
    padding: 0.5rem 0.8rem;
    margin: 0 0.2rem 0.2rem 0;
    border-radius: 20px;
    font-size: 1rem;
    font-weight: 600;
    line-break: loose;
    background-color: white;
    color: black;
    border: 2px solid black;

    opacity: 0.7;
    transition: all 0.3s cubic-bezier(0.31, 1, 1, 1.1);
  }
  .tag-button:hover {
    opacity: 0.8;
    padding: 0.5rem 1rem;
  }
  .tag-button.selected {
    opacity: 1;
    padding: 0.5rem 1.1rem;
    background-color: black;
    color: white;
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    margin: 1rem 0;
  }

  .card {
    transition: all 0.3s ease;
  }

  .dots {
    display: flex;
    gap: 0.5rem;
    justify-content: center;
    margin-top: 0.5rem;
  }
  .dot {
    border: solid 1px #353535;
    background-color: white;
    border-radius: 10px;
    height: 10px;
    width: 10px;
    padding: 0;
    transition: all 0.3s ease;
  }
  .dot.selected {
    background-color: #353535;
  }
  

</style>
<!-- 
<FilterGallery projects={page}>
</FilterGallery> -->